//server/optionserver.js

// server/optionsserver.js
const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Database connection
const db = mysql.createConnection({
    host: 'wd.etsisi.upm.es',
    port: 3306,
    user: 'class',
    password: 'Class24_25',
    database: 'marsbd'
});

// Test database connection
db.connect((err) => {
    if (err) {
        console.error('Error connecting to database:', err);
        return;
    }
    console.log('Connected to database successfully');
});

// Routes for preferences
app.get('/preferences/:username', (req, res) => {
    const { username } = req.params;
    
    const query = 'SELECT ufos, time FROM prefView WHERE user = ?';
    db.query(query, [username], (err, results) => {
        if (err) {
            console.error('Database error:', err);
            return res.status(500).json({ error: 'Database error' });
        }
        
        if (results.length === 0) {
            return res.json({ ufos: 3, time: 60 }); // Default values
        }
        
        res.json(results[0]);
    });
});

app.post('/preferences/:username', (req, res) => {
    const { username } = req.params;
    const { ufos, time } = req.body;
    
    const query = 'UPDATE prefView SET ufos = ?, time = ? WHERE user = ?';
    db.query(query, [ufos, time, username], (err, result) => {
        if (err) {
            console.error('Database error:', err);
            return res.status(500).json({ error: 'Database error' });
        }
        
        res.json({ message: 'Preferences updated successfully' });
    });
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

//anglepage/src/app/app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RouterModule, Routes } from '@angular/router';

import { AppComponent } from './app.component';
import { HomeComponent } from './home/home.component';
import { LoginComponent } from './login/login.component';
import { RegistrationComponent } from './registration/registration.component';
import { PlayComponent } from './play/play.component';
import { PreferencesComponent } from './preferences/preferences.component';
import { RecordsComponent } from './records/records.component';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegistrationComponent },
  { path: 'play', component: PlayComponent },
  { path: 'preferences', component: PreferencesComponent },
  { path: 'records', component: RecordsComponent },
  { path: '**', redirectTo: '' }
];

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    LoginComponent,
    RegistrationComponent,
    PlayComponent,
    PreferencesComponent,
    RecordsComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule,
    RouterModule.forRoot(routes)
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }





// src/app/home/home.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
}

anglepage/src/app/login/login.component.ts

// src/app/login/login.component.ts
import { Component, OnInit } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  username: string = '';
  password: string = '';
  errorMessage: string = '';
  successMessage: string = '';

  constructor(
    private http: HttpClient,
    private router: Router
  ) { }

  ngOnInit() {
    if (localStorage.getItem('token')) {
      this.router.navigate(['/']);
    }
  }

  onSubmit() {
    // Using query parameters in URL, just like the working example
    const url = `http://wd.etsisi.upm.es:10000/users/login?username=${encodeURIComponent(this.username)}&password=${encodeURIComponent(this.password)}`;

    this.http.get(url, {
      observe: 'response'
    }).subscribe({
      next: (response: HttpResponse<any>) => {
        const token = response.headers.get('Authorization');
        if (token) {
          localStorage.setItem('token', token);
          localStorage.setItem('username', this.username);
          this.successMessage = 'Login successful!';
          setTimeout(() => {
            this.router.navigate(['/']);
          }, 1000);
        } else {
          this.errorMessage = 'Token not found in response';
        }
      },
      error: (error) => {
        this.errorMessage = 'Login failed. Please check your credentials.';
        console.error('Login error:', error);
      }
    });
  }
}


/src/app/play/play.component.ts

import { Component, OnInit, ElementRef, ViewChild, AfterViewInit } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';

class UFO {
  width: number = 100;
  height: number = 60;
  x: number;
  y: number;
  speed: number;
  direction: number = 1;
  hit: boolean = false;
  hitTimer: number = 0;
  image: HTMLImageElement;
  ufoImage: HTMLImageElement;
  ufoHitImage: HTMLImageElement;

  constructor(canvas: HTMLCanvasElement, ufoImage: HTMLImageElement, ufoHitImage: HTMLImageElement) {
    this.x = Math.random() * (canvas.width - this.width);
    this.y = canvas.height * 0.2 + Math.random() * (canvas.height * 0.25);
    this.speed = 2 + (Math.random() * 3);
    this.image = ufoImage;
    this.ufoImage = ufoImage;
    this.ufoHitImage = ufoHitImage;
  }

  update(canvas: HTMLCanvasElement) {
    this.x += this.speed * this.direction;
    
    if (this.x <= 0 || this.x + this.width >= canvas.width) {
      this.direction *= -1;
    }
    
    if (this.hit && this.hitTimer <= 0) {
      this.hit = false;
      this.image = this.ufoImage;
    } else if (this.hit) {
      this.hitTimer--;
    }
  }

  draw(ctx: CanvasRenderingContext2D) {
    ctx.drawImage(this.image, this.x, this.y, this.width, this.height);
  }

  activateHitEffect() {
    if (!this.hit) {
      this.hit = true;
      this.hitTimer = 60;
      this.image = this.ufoHitImage;
    }
  }
}

@Component({
  selector: 'app-play',
  templateUrl: './play.component.html',
  styleUrls: ['./play.component.css']
})
export class PlayComponent implements OnInit, AfterViewInit {
  @ViewChild('gameCanvas') private canvasRef!: ElementRef<HTMLCanvasElement>;
  private ctx!: CanvasRenderingContext2D;
  
  private gameLoop: any;
  private timeUpdateInterval: any;
  private gameStartTime: number | null = null;
  private gameStarted: boolean = false;
  private gameActive: boolean = true;
  public score: number = 0;
  public timeRemaining: number = 60;
  private imagesLoaded: number = 0;
  private requiredImages: number = 5;

  private backgroundImage = new Image();
  private playerImage = new Image();
  private ufoImage = new Image();
  private ufoHitImage = new Image();
  private missileImage = new Image();
  
  private player = {
    x: 0,
    y: 0,
    width: 80,
    height: 80,
    speed: 3
  };
  
  private missiles: any[] = [];
  private missileProps = {
    width: 30,
    height: 40,
    speed: 4
  };

  private numUfos: number = 3;
  private ufos: UFO[] = [];
  private keys = {
    left: false,
    right: false,
    space: false
  };

  constructor(
    private http: HttpClient,
    private router: Router
  ) {
    this.backgroundImage.src = 'assets/images/space_pixel.jpeg';
    this.backgroundImage.onload = () => this.handleImageLoad();

    this.playerImage.src = 'assets/images/spaceship_pixel.png';
    this.playerImage.onload = () => this.handleImageLoad();

    this.ufoImage.src = 'assets/images/UFO_fresh_pixel.png';
    this.ufoImage.onload = () => this.handleImageLoad();

    this.ufoHitImage.src = 'assets/images/explosion.png';
    this.ufoHitImage.onload = () => this.handleImageLoad();

    this.missileImage.src = 'assets/images/misslejp_pixel.png';
    this.missileImage.onload = () => this.handleImageLoad();

    const storedNumUfos = localStorage.getItem('numUfos');
    const storedTime = localStorage.getItem('playTime');
    if (storedNumUfos) this.numUfos = parseInt(storedNumUfos);
    if (storedTime) this.timeRemaining = parseInt(storedTime);
  }

  ngOnInit() {
    document.addEventListener('keydown', (e) => this.handleKeyDown(e));
    document.addEventListener('keyup', (e) => this.handleKeyUp(e));
  }

  ngAfterViewInit() {
    const canvas = this.canvasRef.nativeElement;
    this.ctx = canvas.getContext('2d')!;
    this.player.x = canvas.width / 2;
    this.player.y = canvas.height - 100;
  }

  handleImageLoad() {
    this.imagesLoaded++;
    if (this.imagesLoaded === this.requiredImages) {
      this.startGame();
    }
  }

  handleKeyDown(e: KeyboardEvent) {
    if (e.key === 'ArrowLeft') this.keys.left = true;
    if (e.key === 'ArrowRight') this.keys.right = true;
    if (e.key === ' ') {
      e.preventDefault();
      if (!this.keys.space) this.fireMissile();
      this.keys.space = true;
    }
  }

  handleKeyUp(e: KeyboardEvent) {
    if (e.key === 'ArrowLeft') this.keys.left = false;
    if (e.key === 'ArrowRight') this.keys.right = false;
    if (e.key === ' ') this.keys.space = false;
  }

  fireMissile() {
    if (this.missiles.length === 0) {
      this.missiles.push({
        x: this.player.x + this.player.width / 2 - this.missileProps.width / 2,
        y: this.player.y,
        width: this.missileProps.width,
        height: this.missileProps.height
      });
    }
  }

  updatePlayer() {
    const canvas = this.canvasRef.nativeElement;
    if (this.keys.left) {
      this.player.x = Math.max(0, this.player.x - this.player.speed);
    }
    if (this.keys.right) {
      this.player.x = Math.min(canvas.width - this.player.width, this.player.x + this.player.speed);
    }
  }

  updateMissiles() {
    for (let i = this.missiles.length - 1; i >= 0; i--) {
      this.missiles[i].y -= this.missileProps.speed;

      if (this.missiles[i].y + this.missiles[i].height < 0) {
        this.missiles.splice(i, 1);
        this.score = Math.max(0, this.score - 25);
        continue;
      }

      for (const ufo of this.ufos) {
        if (this.checkCollision(this.missiles[i], ufo) && !ufo.hit) {
          this.missiles.splice(i, 1);
          ufo.activateHitEffect();
          this.score += 100;
          break;
        }
      }
    }
  }

  checkCollision(rect1: any, rect2: any): boolean {
    return rect1.x < rect2.x + rect2.width &&
           rect1.x + rect1.width > rect2.x &&
           rect1.y < rect2.y + rect2.height &&
           rect1.y + rect1.height > rect2.y;
  }

  draw() {
    const canvas = this.canvasRef.nativeElement;
    this.ctx.drawImage(this.backgroundImage, 0, 0, canvas.width, canvas.height);
    this.ctx.drawImage(this.playerImage, this.player.x, this.player.y, 
      this.player.width, this.player.height);
    
    this.missiles.forEach(missile => {
      this.ctx.drawImage(this.missileImage, missile.x, missile.y, 
        missile.width, missile.height);
    });

    this.ufos.forEach(ufo => ufo.draw(this.ctx));

    this.ctx.fillStyle = 'white';
    this.ctx.font = '20px Arial';
    this.ctx.fillText(`Score: ${this.score}`, 10, 30);
    this.ctx.fillText(`Time: ${this.timeRemaining}`, canvas.width - 100, 30);
  }

  startGame() {
    if (this.gameStarted) return;
    
    this.gameStarted = true;
    this.gameActive = true;
    this.score = 0;
    this.missiles = [];
    this.ufos = Array(this.numUfos).fill(null).map(() => 
      new UFO(this.canvasRef.nativeElement, this.ufoImage, this.ufoHitImage)
    );
    
    this.gameStartTime = Date.now();

    // Game loop for movement and drawing
    this.gameLoop = setInterval(() => {
      if (!this.gameActive) return;
      this.updatePlayer();
      this.updateMissiles();
      this.ufos.forEach(ufo => ufo.update(this.canvasRef.nativeElement));
      this.draw();
    }, 1000 / 60);

    // Separate interval for time updates
    this.timeUpdateInterval = setInterval(() => {
      this.timeRemaining--;
      if (this.timeRemaining <= 0) {
        this.endGame();
      }
    }, 1000);
  }

  endGame() {
    this.gameActive = false;
    clearInterval(this.gameLoop);
    clearInterval(this.timeUpdateInterval);

    const canvas = this.canvasRef.nativeElement;

    // Calculate time-based division factor
    let timeDivider = 1;
    const selectedTime = parseInt(localStorage.getItem('playTime') || '60');
    if (selectedTime === 120) timeDivider = 2;
    if (selectedTime === 180) timeDivider = 3;
    
    // Apply time division
    this.score = Math.floor(this.score / timeDivider);
    
    // Apply UFO penalty: -50 points per UFO beyond the first one
    const ufosPenalty = (this.numUfos - 1) * 50;
    this.score = Math.max(0, this.score - ufosPenalty);

    // Draw game over screen
    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.75)';
    this.ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.font = '48px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText('Game Over!', canvas.width / 2, canvas.height / 2);
    this.ctx.font = '24px Arial';
    this.ctx.fillText(`Final Score: ${this.score}`, canvas.width / 2, canvas.height / 2 + 50);

    // Only show save option if user is logged in
    const token = localStorage.getItem('token');
    if (token) {
      this.ctx.font = '20px Arial';
      this.ctx.fillText('Press S to save your score', canvas.width / 2, canvas.height / 2 + 100);
      
      // Add event listener for saving score
      const saveHandler = (e: KeyboardEvent) => {
        if (e.key.toLowerCase() === 's') {
          const headers = new HttpHeaders({
            'Authorization': token,
            'Content-Type': 'application/x-www-form-urlencoded'
          });

          // Create URL-encoded form data
          const formData = new URLSearchParams();
          formData.append('punctuation', Math.floor(this.score).toString());
          formData.append('ufos', Math.floor(this.numUfos).toString());
          formData.append('disposedTime', Math.floor(selectedTime).toString());

          this.http.post('http://wd.etsisi.upm.es:10000/records', 
            formData.toString(),
            { headers }
          ).subscribe({
              next: () => {
                this.ctx.fillStyle = 'rgba(0, 0, 0, 0.75)';
                this.ctx.fillRect(0, 0, canvas.width, canvas.height);
                this.ctx.fillStyle = '#FFFFFF';
                this.ctx.fillText('Score saved successfully!', canvas.width / 2, canvas.height / 2);
              },
              error: (error) => {
                this.ctx.fillStyle = 'rgba(0, 0, 0, 0.75)';
                this.ctx.fillRect(0, 0, canvas.width, canvas.height);
                this.ctx.fillStyle = '#FF0000';
                this.ctx.fillText('Failed to save score. Please try again.', canvas.width / 2, canvas.height / 2);
                console.error('Error saving score:', error);
              }
            });
          
          // Remove event listener after saving
          document.removeEventListener('keydown', saveHandler);
        }
      };
      
      document.addEventListener('keydown', saveHandler);
    }
  }

  ngOnDestroy() {
    clearInterval(this.gameLoop);
    clearInterval(this.timeUpdateInterval);
    document.removeEventListener('keydown', this.handleKeyDown);
    document.removeEventListener('keyup', this.handleKeyUp);
  }
}


/src/app/preferences/preferences.component.ts


import { Component, OnInit } from '@angular/core';
import { PreferencesService } from '../services/preferences.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-preferences',
  templateUrl: './preferences.component.html',
  styleUrls: ['./preferences.component.css']
})
export class PreferencesComponent implements OnInit {
  numberOfUFOs: number = 1;  // Default is 1
  timeInSeconds: number = 60;  // Default is 60 seconds
  isLoggedIn: boolean = false;
  errorMessage: string = '';
  successMessage: string = '';

  // Available options as per requirements
  ufoOptions: number[] = [1, 2, 3, 4, 5];
  timeOptions: number[] = [60, 120, 180];

  constructor(
    private preferencesService: PreferencesService,
    private router: Router
  ) { }

  ngOnInit(): void {
    this.isLoggedIn = !!localStorage.getItem('token');
    // Load local preferences by default
    const storedUfos = localStorage.getItem('numUfos');
    const storedTime = localStorage.getItem('playTime');
    if (storedUfos) {
      const ufos = parseInt(storedUfos);
      if (this.ufoOptions.includes(ufos)) {
        this.numberOfUFOs = ufos;
      }
    }
    if (storedTime) {
      const time = parseInt(storedTime);
      if (this.timeOptions.includes(time)) {
        this.timeInSeconds = time;
      }
    }
  }

  saveLocal(): void {
    localStorage.setItem('numUfos', this.numberOfUFOs.toString());
    localStorage.setItem('playTime', this.timeInSeconds.toString());
    this.successMessage = 'Preferences saved locally';
    setTimeout(() => this.successMessage = '', 3000);
  }

  saveServer(): void {
    if (!this.isLoggedIn) return;

    const username = localStorage.getItem('username');
    if (!username) return;

    this.preferencesService.savePreferences(username, {
      numufos: this.numberOfUFOs,
      time: this.timeInSeconds
    }).subscribe({
      next: () => {
        this.successMessage = 'Preferences saved to server';
        setTimeout(() => this.successMessage = '', 3000);
        this.saveLocal(); // Also save locally
      },
      error: (error: Error) => {
        console.error('Error saving preferences:', error);
        this.errorMessage = 'Failed to save preferences to server';
        setTimeout(() => this.errorMessage = '', 3000);
      }
    });
  }

  getFromServer(): void {
    if (!this.isLoggedIn) return;

    const username = localStorage.getItem('username');
    if (!username) return;

    this.preferencesService.getPreferences(username).subscribe({
      next: (prefs: any) => {
        if (prefs.ufos && this.ufoOptions.includes(prefs.ufos)) {
          this.numberOfUFOs = prefs.ufos;
        }
        if (prefs.time && this.timeOptions.includes(prefs.time)) {
          this.timeInSeconds = prefs.time;
        }
        this.saveLocal(); // Save to localStorage
        this.successMessage = 'Preferences loaded from server';
        setTimeout(() => this.successMessage = '', 3000);
      },
      error: (error: Error) => {
        console.error('Error loading preferences:', error);
        this.errorMessage = 'Failed to load preferences';
        setTimeout(() => this.errorMessage = '', 3000);
      }
    });
  }
}





// src/app/records/records.component.ts
import { Component, OnInit } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';

interface Record {
  username: string;
  punctuation: number;
  ufos: number;
  disposedTime: number;
  recordDate: number;
}

@Component({
  selector: 'app-records',
  templateUrl: './records.component.html',
  styleUrls: ['./records.component.css']
})
export class RecordsComponent implements OnInit {
  records: Record[] = [];
  errorMessage: string = '';

  constructor(private http: HttpClient) { }

  ngOnInit() {
    this.loadRecords();
  }

  loadRecords() {
    const token = localStorage.getItem('token');
    if (!token) {
      this.errorMessage = 'Please login to view records';
      return;
    }

    const headers = new HttpHeaders().set('Authorization', token);

    this.http.get<Record[]>('http://wd.etsisi.upm.es:10000/records', { headers })
      .subscribe({
        next: (data) => {
          this.records = data;
        },
        error: (error) => {
          this.errorMessage = 'Error loading records';
          console.error('Records error:', error);
        }
      });
  }

  formatDate(timestamp: number): string {
    return new Date(timestamp).toLocaleDateString();
  }
}





// src/app/registration/registration.component.ts
import { Component, OnInit } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css']
})
export class RegistrationComponent implements OnInit {
  username: string = '';
  email: string = '';
  password: string = '';
  confirmPassword: string = '';
  errorMessage: string = '';
  successMessage: string = '';

  constructor(
    private http: HttpClient,
    private router: Router
  ) { }

  ngOnInit() {
    if (localStorage.getItem('token')) {
      this.router.navigate(['/']);
    }
  }

  checkUsername() {
    if (this.username) {
      if (this.username.length > 8) {
        this.errorMessage = 'Username must be maximum 8 characters';
        return;
      }

      this.http.get(`http://wd.etsisi.upm.es:10000/users/${this.username}`).subscribe({
        next: () => {
          this.errorMessage = 'Username already exists';
        },
        error: (error) => {
          if (error.status === 404) {
            this.errorMessage = '';
          }
        }
      });
    }
  }

  onSubmit() {
    if (this.password !== this.confirmPassword) {
      this.errorMessage = 'Passwords do not match';
      return;
    }

    if (!this.username || !this.email || !this.password) {
      this.errorMessage = 'All fields are required';
      return;
    }

    // Create URLSearchParams for urlencoded format
    const formData = new URLSearchParams();
    formData.append('username', this.username);
    formData.append('email', this.email);
    formData.append('password', this.password);

    this.http.post('http://wd.etsisi.upm.es:10000/users',
      formData.toString(),
      {
        headers: new HttpHeaders()
          .set('Content-Type', 'application/x-www-form-urlencoded')
      }
    ).subscribe({
      next: () => {
        this.successMessage = 'Registration successful!';
        setTimeout(() => {
          this.router.navigate(['/login']);
        }, 1000);
      },
      error: (error) => {
        if (error.status === 409) {
          this.errorMessage = 'Username already exists';
        } else if (error.status === 400) {
          this.errorMessage = 'Invalid registration data';
        } else {
          this.errorMessage = 'Registration failed. Please try again.';
        }
        console.error('Registration error:', error);
      }
    });
  }
}




//src/app/services/preferences.service.ts



import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class PreferencesService {
  private apiUrl = 'http://wd.etsisi.upm.es:10000/users';

  constructor(private http: HttpClient) { }

  getPreferences(username: string): Observable<any> {
    const token = localStorage.getItem('token');
    const headers = new HttpHeaders().set('Authorization', token || '');
    return this.http.get(`${this.apiUrl}/${username}/options`, { headers });
  }

  savePreferences(username: string, preferences: { numufos: number, time: number }): Observable<any> {
    const token = localStorage.getItem('token');
    const headers = new HttpHeaders({
      'Authorization': token || '',
      'Content-Type': 'application/x-www-form-urlencoded'
    });
    const body = `numufos=${preferences.numufos}&time=${preferences.time}`;
    return this.http.patch(`${this.apiUrl}/${username}/options`, body, { headers });
  }
}